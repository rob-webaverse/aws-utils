AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: "Webaverse Service Containerization"

Parameters:
  ServiceName:
    Type: String
    Default: test
    Description: Name the service that will be containerized
  GitSource:
    Type: String
    Default: https://github.com/rob-webaverse/app.git
    Description: Link to the git repo that contains the service
  DockerHubCredentialsUsername:
    Type: String
    Default: username
    Description: DockerHub username to pull down Docker images
  DockerHubCredentialsPassword:
    Type: String
    NoEcho: true
    Default: password
    Description: DockerHub password to pull down Docker images
  GitHubPersonalAccessToken:
    Type: String
    NoEcho: true
    Default: password
    Description: GitHub Personal Access Token to access changes to the repos
  ServiceContainerListeningPorts:
    Type: List<Number>
    Default: 80
    Description: Ports that the service is presenting and should thus be open to the container

Resources:
    CodeBuildSecretsManagerPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildSecretsManagerPolicy-${ServiceName}-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "secretsmanager:GetSecretValue"
                            ],
                            "Resource": [
                                "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/CodeBuild/*"
                            ]
                        }
                    ]
                }

    CodeBuildBasePolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildBasePolicy-${ServiceName}-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
                            ],
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:s3:::codepipeline-${AWS::Region}*"
                            ],
                            "Action": [
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:GetBucketAcl",
                                "s3:GetBucketLocation"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:s3:::${CodePipelineS3Bucket}",
                                "arn:aws:s3:::${CodePipelineS3Bucket}/*"
                            ],
                            "Action": [
                                "s3:PutObject",
                                "s3:GetBucketAcl",
                                "s3:GetBucketLocation"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codebuild:CreateReportGroup",
                                "codebuild:CreateReport",
                                "codebuild:UpdateReport",
                                "codebuild:BatchPutTestCases",
                                "codebuild:BatchPutCodeCoverages"
                            ],
                            "Resource": [
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*"
                            ]
                        }
                    ]
                }


    CodeBuildImageRepositoryPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildImageRepositoryPolicy-${ServiceName}-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecr:GetAuthorizationToken"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:BatchGetImage",
                                "ecr:PutImage",
                                "ecr:InitiateLayerUpload",
                                "ecr:UploadLayerPart",
                                "ecr:CompleteLayerUpload"
                            ],
                            "Resource": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/ecrrepository-${ServiceName}-${AWS::Region}"
                        }
                    ]
                }

    CodeBuildBasePolicy2:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildBasePolicy-${ServiceName}-${AWS::Region}2"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": [
                                "ecr:GetRegistryPolicy",
                                "ecr:DescribeImageScanFindings",
                                "ecr:GetLifecyclePolicyPreview",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:DescribeRegistry",
                                "ecr:DescribeImageReplicationStatus",
                                "ecr:GetAuthorizationToken",
                                "ecr:ListTagsForResource",
                                "ecr:BatchGetImage",
                                "ecr:DescribeRepositories",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:GetRepositoryPolicy",
                                "ecr:GetLifecyclePolicy"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Sid": "VisualEditor1",
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetBucketAcl",
                                "logs:CreateLogGroup",
                                "logs:PutLogEvents",
                                "codebuild:CreateReportGroup",
                                "codebuild:CreateReport",
                                "s3:PutObject",
                                "s3:GetObject",
                                "logs:CreateLogStream",
                                "codebuild:UpdateReport",
                                "codebuild:BatchPutCodeCoverages",
                                "codebuild:BatchPutTestCases",
                                "s3:GetBucketLocation",
                                "s3:GetObjectVersion"
                            ],
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/webaverse-${ECSCluster}",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/webaverse-${ECSCluster}:*",
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/webaverse-${ECSCluster}*",
                                "arn:aws:s3:::codepipeline-${AWS::Region}-*"
                            ]
                        }
                    ]
                }


    CodePipelineManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodePipelineManagedPolicy-${ServiceName}-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: |
                {
                    "Statement": [
                        {
                            "Action": [
                                "iam:PassRole"
                            ],
                            "Resource": "*",
                            "Effect": "Allow",
                            "Condition": {
                                "StringEqualsIfExists": {
                                    "iam:PassedToService": [
                                        "cloudformation.amazonaws.com",
                                        "elasticbeanstalk.amazonaws.com",
                                        "ec2.amazonaws.com",
                                        "ecs-tasks.amazonaws.com"
                                    ]
                                }
                            }
                        },
                        {
                            "Action": [
                                "codecommit:CancelUploadArchive",
                                "codecommit:GetBranch",
                                "codecommit:GetCommit",
                                "codecommit:GetRepository",
                                "codecommit:GetUploadArchiveStatus",
                                "codecommit:UploadArchive"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codedeploy:CreateDeployment",
                                "codedeploy:GetApplication",
                                "codedeploy:GetApplicationRevision",
                                "codedeploy:GetDeployment",
                                "codedeploy:GetDeploymentConfig",
                                "codedeploy:RegisterApplicationRevision"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codestar-connections:UseConnection"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "elasticbeanstalk:*",
                                "ec2:*",
                                "elasticloadbalancing:*",
                                "autoscaling:*",
                                "cloudwatch:*",
                                "s3:*",
                                "sns:*",
                                "cloudformation:*",
                                "rds:*",
                                "sqs:*",
                                "ecs:*"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "lambda:InvokeFunction",
                                "lambda:ListFunctions"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "opsworks:CreateDeployment",
                                "opsworks:DescribeApps",
                                "opsworks:DescribeCommands",
                                "opsworks:DescribeDeployments",
                                "opsworks:DescribeInstances",
                                "opsworks:DescribeStacks",
                                "opsworks:UpdateApp",
                                "opsworks:UpdateStack"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "cloudformation:CreateStack",
                                "cloudformation:DeleteStack",
                                "cloudformation:DescribeStacks",
                                "cloudformation:UpdateStack",
                                "cloudformation:CreateChangeSet",
                                "cloudformation:DeleteChangeSet",
                                "cloudformation:DescribeChangeSet",
                                "cloudformation:ExecuteChangeSet",
                                "cloudformation:SetStackPolicy",
                                "cloudformation:ValidateTemplate"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codebuild:BatchGetBuilds",
                                "codebuild:StartBuild",
                                "codebuild:BatchGetBuildBatches",
                                "codebuild:StartBuildBatch"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "devicefarm:ListProjects",
                                "devicefarm:ListDevicePools",
                                "devicefarm:GetRun",
                                "devicefarm:GetUpload",
                                "devicefarm:CreateUpload",
                                "devicefarm:ScheduleRun"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "servicecatalog:ListProvisioningArtifacts",
                                "servicecatalog:CreateProvisioningArtifact",
                                "servicecatalog:DescribeProvisioningArtifact",
                                "servicecatalog:DeleteProvisioningArtifact",
                                "servicecatalog:UpdateProduct"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "cloudformation:ValidateTemplate"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecr:DescribeImages"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "states:DescribeExecution",
                                "states:DescribeStateMachine",
                                "states:StartExecution"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "appconfig:StartDeployment",
                                "appconfig:StopDeployment",
                                "appconfig:GetDeployment"
                            ],
                            "Resource": "*"
                        }
                    ],
                    "Version": "2012-10-17"
                }


    CodePipelineServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "CodePipelineServiceRole-${ServiceName}-${AWS::Region}"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"
              - !Ref CodePipelineManagedPolicy

    ECSTaskDefinition:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions: 
              - 
                Essential: true
                Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/webaverse:latest"
                LogConfiguration: 
                    LogDriver: "awslogs"
                    Options: 
                        awslogs-group: !Sub "/ecs/run_webaverse_${ServiceName}"
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: "ecs"
                Name: !Sub "webaverse-${ServiceName}"
                PortMappings: 
                  - 
                    ContainerPort: !Select [0, !Ref ServiceContainerListeningPorts]
                    HostPort: !Select [0, !Ref ServiceContainerListeningPorts]
                    Protocol: "tcp"
            Family: !Sub "run_webaverse_${ServiceName}"
            ExecutionRoleArn: !GetAtt ECSTaskExecutionRole2.Arn
            NetworkMode: "awsvpc"
            RequiresCompatibilities: 
              - "FARGATE"
            Cpu: "256"
            Memory: "512"

    CodeBuildServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "CodeBuildServiceRole-${ServiceName}-${AWS::Region}"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codebuild.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"
              - !Ref CodeBuildBasePolicy
              - !Ref CodeBuildSecretsManagerPolicy

    EC2VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.10.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: "default"

    EC2SubnetA:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}a"
            CidrBlock: "10.10.0.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: true
            Tags: 
            -   Key: "Service"
                Value: !Sub "${ServiceName}" 
            -   Key: "Name"
                Value: !Sub "SubnetA"

    EC2SubnetB:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}b"
            CidrBlock: "10.10.16.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: true
            Tags: 
            -   Key: "Service"
                Value: !Sub "${ServiceName}" 
            -   Key: "Name"
                Value: !Sub "SubnetB"

    EC2SubnetC:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}c"
            CidrBlock: "10.10.32.0/20"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: true
            Tags: 
            -   Key: "Service"
                Value: !Sub "${ServiceName}" 
            -   Key: "Name"
                Value: !Sub "SubnetC"

    EC2NetworkAcl:
        Type: "AWS::EC2::NetworkAcl"
        Properties:
            VpcId: !Ref EC2VPC

    EC2RouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC

 
    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: !Sub "Allows access to ${ServiceName} from anywhere"
            GroupName: !Sub "SecurityGroup-${ServiceName}-${AWS::Region}"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: !Select [0, !Ref ServiceContainerListeningPorts]
                IpProtocol: "tcp"
                ToPort: !Select [0, !Ref ServiceContainerListeningPorts]
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: -1
                IpProtocol: "icmp"
                ToPort: -1
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: !Select [0, !Ref ServiceContainerListeningPorts]
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: !Sub "TG-${ServiceName}-${AWS::Region}"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets: 
              - 
                Id: "10.10.32.254"
                Port: !Select [0, !Ref ServiceContainerListeningPorts]
                AvailabilityZone: !GetAtt EC2SubnetC.AvailabilityZone

    ECRRepository:
        Type: "AWS::ECR::Repository"
        Properties:
            RepositoryName: !Sub "ecrrepository-${ServiceName}-${AWS::Region}"
            

    CodeBuildProject:
        Type: "AWS::CodeBuild::Project"
        Properties:
            Name: !Sub "CodeBuildProject-${ServiceName}-${AWS::Region}"
            Source: 
                InsecureSsl: false
                Type: "CODEPIPELINE"
            Artifacts: 
                EncryptionDisabled: false
                Name: !Sub "CodeBuildProjectArtifacts-${ServiceName}-${AWS::Region}"
                Packaging: "NONE"
                Type: "CODEPIPELINE"
            Cache: 
                Type: "NO_CACHE"
            Environment: 
                ComputeType: "BUILD_GENERAL1_SMALL"
                EnvironmentVariables: 
                  - 
                    Name: "DOCKERHUB_USERNAME"
                    Type: "SECRETS_MANAGER"
                    Value: "dockerhub:username"
                  - 
                    Name: "DOCKERHUB_PASSWORD"
                    Type: "SECRETS_MANAGER"
                    Value: "dockerhub:password"
                Image: "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
                ImagePullCredentialsType: "CODEBUILD"
                PrivilegedMode: true
                Type: "LINUX_CONTAINER"
            ServiceRole: !Ref CodeBuildServiceRole
            TimeoutInMinutes: 60
            QueuedTimeoutInMinutes: 480
            EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
            BadgeEnabled: false
            LogsConfig: 
                CloudWatchLogs: 
                    Status: "DISABLED"
                S3Logs: 
                    Status: "ENABLED"
                    Location: !Sub "${CodePipelineS3Bucket}/webaverse-${ServiceName}-codebuild"
                    EncryptionDisabled: false
            Visibility: "PRIVATE"

    CodeBuildSourceCredential:
        Type: "AWS::CodeBuild::SourceCredential"
        Properties:
            AuthType: "PERSONAL_ACCESS_TOKEN"
            ServerType: "GITHUB"
            Token: 
                Ref: GitHubPersonalAccessToken

    ECSCluster:
        Type: "AWS::ECS::Cluster"
        Properties:
            ClusterName: !Sub "ECSCluster-${ServiceName}-${AWS::Region}"
            CapacityProviders: 
              - "FARGATE_SPOT"
              - "FARGATE"

    ECSService:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: !Sub "ECSService-${ServiceName}-${AWS::Region}"
            Cluster: !GetAtt ECSCluster.Arn
            LoadBalancers: 
              - 
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                ContainerName: !Sub "ECSContainer-${ServiceName}-${AWS::Region}"
                ContainerPort: !Select [0, !Ref ServiceContainerListeningPorts]
            DesiredCount: 1
            LaunchType: "FARGATE"
            PlatformVersion: "LATEST"
            TaskDefinition: !Ref ECSTaskDefinition
            DeploymentConfiguration: 
                MaximumPercent: 200
                MinimumHealthyPercent: 100
                DeploymentCircuitBreaker: 
                    Enable: false
                    Rollback: false
            Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            NetworkConfiguration: 
                AwsvpcConfiguration: 
                    AssignPublicIp: "DISABLED"
                    SecurityGroups: 
                      - !Ref EC2SecurityGroup
                    Subnets: 
                      - !Ref EC2SubnetC
                      - !Ref EC2SubnetA
            HealthCheckGracePeriodSeconds: 0
            SchedulingStrategy: "REPLICA"

    CodePipelineS3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "codepipeline-${ServiceName}-777902737697"

    CodeDeployApplication:
        Type: "AWS::CodeDeploy::Application"
        Properties:
            ApplicationName: !Sub "CodeDeployApplication-${ServiceName}-${AWS::Region}"
            ComputePlatform: "ECS"

    CodePipelinePipeline:
        Type: "AWS::CodePipeline::Pipeline"
        Properties:
            Name: !Sub "CodePipeline-${ServiceName}-${AWS::Region}"
            RoleArn: !GetAtt CodePipelineServiceRole.Arn
            ArtifactStore: 
                Location: !Ref CodePipelineS3Bucket
                Type: "S3"
            Stages: 
              - 
                Name: "Source"
                Actions: 
                  - 
                    Name: "Source"
                    ActionTypeId: 
                        Category: "Source"
                        Owner: "AWS"
                        Provider: "CodeStarSourceConnection"
                        Version: "1"
                    Configuration: 
                        BranchName: "master"
                        ConnectionArn: !Sub "arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/402e86c8-09ba-42fb-8254-8c3a6e5a1994"
                        FullRepositoryId: !Sub "webaverse/${ECSCluster}"
                        OutputArtifactFormat: "CODE_ZIP"
                    OutputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "SourceVariables"
                    RunOrder: 1
              - 
                Name: "Build"
                Actions: 
                  - 
                    Name: "Build"
                    ActionTypeId: 
                        Category: "Build"
                        Owner: "AWS"
                        Provider: "CodeBuild"
                        Version: "1"
                    Configuration: 
                        ProjectName: !Ref CodeBuildProject
                    InputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    OutputArtifacts: 
                      - 
                        Name: "BuildArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "BuildVariables"
                    RunOrder: 1
              - 
                Name: "Deploy"
                Actions: 
                  - 
                    Name: "Deploy"
                    ActionTypeId: 
                        Category: "Deploy"
                        Owner: "AWS"
                        Provider: "ECS"
                        Version: "1"
                    Configuration: 
                        ClusterName: !Ref ECSCluster
                        ServiceName: !Ref ECSService
                    InputArtifacts: 
                      - 
                        Name: "BuildArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "DeployVariables"
                    RunOrder: 1

    ECSAutoScaleRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "ECSAutoscaleRole-${ServiceName}-${AWS::Region}"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"application-autoscaling.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"

    DockerHubSecretAccessPolicy:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "secretsmanager:GetSecretValue"
                            ],
                            "Resource": [
                                "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:DockerHub*"
                            ]
                        }
                    ]
                }
            Roles: 
              - !Ref CodeBuildServiceRole
            PolicyName: "dockerhub_secret_access"

    DockerHubSecretsManagerSecret:
        Type: "AWS::SecretsManager::Secret"
        Properties:
            Name: !Sub "DockerHubCredentialsSecret-${ServiceName}-${AWS::Region}"
            SecretString: '{"username":DockerHubCredentialsUsername,"password":DockerHubCredentialsPassword}'

    GitHubPATSecretsManagerSecret:
        Type: "AWS::SecretsManager::Secret"
        Properties:
            Name: !Sub "GitHubPATSecretsManagerSecret-${ServiceName}-${AWS::Region}"
            SecretString: '{"personalaccesstoken":GitHubPersonalAccessToken}'

    ECSTaskExecutionRole2:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "ECSTaskExecutionRole2-${ServiceName}-${AWS::Region}"
            AssumeRolePolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ecs-tasks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

