AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: "Webaverse Service Secrets"

Parameters:
    DockerHubCredentialsUsername:
        Type: String
        Default: username
        Description: DockerHub username to pull down Docker images
    DockerHubCredentialsPassword:
        Type: String
        NoEcho: true
        Default: password
        Description: DockerHub password to pull down Docker images
    GitHubPersonalAccessToken:
        Type: String
        NoEcho: true
        Default: password
        Description: GitHub Personal Access Token to access changes to the repos
    PM2SecretKey:
        Type: String
        NoEcho: true
        Default: password
        Description: PM2 Secret Key
Resources:
    CodeBuildSecretsManagerPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildSecretsManagerPolicy-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "secretsmanager:GetSecretValue"
                            ],
                            "Resource": [
                                "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/CodeBuild/*",
                                "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:DockerHub*",
                                "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:PM2*"
                            ]
                        }
                    ]
                }
    CodeBuildCodeStarPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildCodeStarPolicy-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "codestar-connections:UseConnection",
                            "Resource": "arn:aws:codestar-connections:*:${AWS::AccountId}:connection/*"
                        }
                    ]
                }
    CodeBuildBasePolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildBasePolicy-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                            ],
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:s3:::codepipeline-*"
                            ],
                            "Action": [
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:GetBucketAcl",
                                "s3:GetBucketLocation"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:s3:::CodePipelineS3Bucket",
                                "arn:aws:s3:::CodePipelineS3Bucket/*"
                            ],
                            "Action": [
                                "s3:PutObject",
                                "s3:GetBucketAcl",
                                "s3:GetBucketLocation"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codebuild:CreateReportGroup",
                                "codebuild:CreateReport",
                                "codebuild:UpdateReport",
                                "codebuild:BatchPutTestCases",
                                "codebuild:BatchPutCodeCoverages"
                            ],
                            "Resource": [
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*"
                            ]
                        }
                    ]
                }
    CodeBuildServiceRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "CodeBuildServiceRole-${AWS::Region}"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codebuild.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"
              - !Ref CodeBuildBasePolicy
              - !Ref CodeBuildSecretsManagerPolicy
              - !Ref CodeBuildCodeStarPolicy            
    DockerHubSecretAccessPolicy:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "secretsmanager:GetSecretValue"
                            ],
                            "Resource": [
                                "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:DockerHub*"
                            ]
                        }
                    ]
                }
            Roles: 
              - !Ref CodeBuildServiceRole
            PolicyName: "dockerhub_secret_access"

    DockerHubSecretsManagerSecret:
        Type: "AWS::SecretsManager::Secret"
        Properties:
            Name: !Sub "DockerHubCredentialsSecret-${AWS::Region}"
            SecretString: !Sub '{"username":"${DockerHubCredentialsUsername}","password":"${DockerHubCredentialsPassword}"}'

    GitHubPATSecretsManagerSecret:
        Type: "AWS::SecretsManager::Secret"
        Properties:
            Name: !Sub "GitHubPATSecretsManagerSecret-${AWS::Region}"
            SecretString: !Sub '{"personalaccesstoken":"${GitHubPersonalAccessToken}"}'
    PM2SecretKeySecret:
        Type: "AWS::SecretsManager::Secret"
        Properties:
            Name: !Sub "PM2SecretKeySecret-${AWS::Region}"
            SecretString: !Sub '{"pm2secretkey":"${PM2SecretKey}"}'
    CodeBuildSourceCredential:
        Type: "AWS::CodeBuild::SourceCredential"
        Properties:
            AuthType: "PERSONAL_ACCESS_TOKEN"
            ServerType: "GITHUB"
            Token: 
                Ref: GitHubPersonalAccessToken
Outputs:
    StackCodeBuildServiceRole:
        Description: The Arn of the stack CodeBuildServiceRole
        Value: !GetAtt CodeBuildServiceRole.Arn
        Export:
            Name: !Sub "${AWS::StackName}-CodeBuildServiceRole"
    StackDockerHubSecretName:
        Description: The Name of the stack DockerHubSecret
        Value: !Sub "DockerHubCredentialsSecret-${AWS::Region}"
        Export:
            Name: !Sub "${AWS::StackName}-DockerHubSecretName"
    StackPM2SecretKey:
        Description: The PM2 Secret Key
        Value: !Sub "PM2SecretKeySecret-${AWS::Region}"
        Export:
            Name: !Sub "${AWS::StackName}-PM2SecretKey"
    
    